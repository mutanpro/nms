<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Server - UNMS</title>
    <!-- HEAD -->
    <%- include('partials/head') %>
</head>

<body class="antialiased">
    <div class="page">
        <!-- HEADER  -->
        <%- include('partials/header', {overlap: true}) %>

        <div class="content">
            <div class="container-xxl">
                <!-- PAGE HEADER  -->
                <div class="page-header d-print-none">
                    <div class="row align-items-center">
                        <div class="col">
                            <!-- Page pre-title -->
                            <div class="page-pretitle">Dashboard</div>
                            <div class="page-pretitle">
                                <h2 class="page-title">
                                    <% if(locals.server){ %>
                                    <%= server.name %> - <%= server.comment %> (<%= server.connectTo %>)
                                    <% } %>
                                </h2>
                            </div>
                        </div>
                        <!-- Page title actions -->

                    </div>
                </div>
                <!-- CONTENT  -->
                <div class="row row-deck row-cards">
                    <!-- CPU LOAD WIDGET  -->
                    <div class="col-sm-6 col-lg-3 col-xs-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div class="subheader">CPU LOAD <span class="badge bg-purple" id="model"></span>
                                    </div>
                                </div>
                                <div class="d-flex align-items-baseline">
                                    <div class="h1 mb-0 me-2"><span id="cpu-load">0</span> %</div>
                                </div>
                            </div>
                            <div id="chart-cpu-load" class="chart-sm"></div>
                        </div>
                    </div>
                    <!-- RAM WIDGET  -->
                    <div class="col-sm-6 col-lg-3 col-xs-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div class="subheader">RAM USAGE <span class="badge bg-orange" id="version"></span>
                                    </div>
                                </div>
                                <div class="d-flex align-items-baseline">
                                    <div class="h1 mb-0 me-2"><span id="used-memory">0 MB</span> / <span
                                            id="total-memory">0 MB</span></div>
                                </div>
                            </div>
                            <div id="chart-ram-usage" class="chart-sm"></div>
                        </div>
                    </div>
                    <!-- UPTIME -->
                    <div class="col-sm-6 col-lg-3 col-xs-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div class="subheader">UPTIME/TEMPERATUR/DATETIME</div>
                                </div>
                                <div class="h2 mb-2"> <span id="uptime">0D 0H 0M</span> | <span
                                        id="temperature">-</span>Â°C | <span id="voltage">-</span>V</div>
                                <div class="h3 mb-1 text-muted" id="date-time">01 Jan 1970 00:00:00</div>
                            </div>
                        </div>
                    </div>
                    <!-- DEVICES -->
                    <div class="col-sm-6 col-lg-3 col-xs-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div class="subheader">DEVICES</div>
                                </div>
                                <div class="h1 mb-2" id="total-device"> - Device</div>
                                <div class="h2 mb-1 text-muted" id="offline-device"> <span
                                        class="badge bg-gray">Scanning</span></div>

                            </div>
                        </div>
                    </div>
                    <!-- DATE -->

                </div>
                <!--<div class="row row-card mt-2">
                    <center>
                        <div class="col-lg-12 col-md-12 col-sm-12" id="devicesOff">
                        </div>
                    </center>
                </div>-->
                <script>
                    var arrether = [];
                </script>
                <div class="row row-card mt-2">

                    <div class="col-lg-12 col-md-12 col-sm-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="col-lg-12 col-md-12 col-sm-12">
                                    <div class="row">
                                        <% if (locals.interfaces){ %>
                                        <% locals.interfaces.forEach(function(interface,keys){ %>
                                        <% if (interface.type=="ether"){ %>
                                        <div class="<%= (keys<3)?'col-sm-4':'col-sm-3' %>">
                                            <div class="card mb-3">
                                                <div class="card-body">
                                                    <div class="d-flex flex-row-reverse">
                                                        <!--<div class="mx-1">
                                                            <a class="text-muted" href="#" id="selected-interface">
                                                                <%= interface.name %>
                                                            </a>
                                                        </div>-->
                                                        <div class="mx-1">
                                                            <svg xmlns="http://www.w3.org/2000/svg"
                                                                class="icon icon-tabler icon-tabler-arrow-big-down"
                                                                width="44" height="44" viewBox="0 0 24 24"
                                                                stroke-width="1.5" stroke="#fc0303" fill="#fc0303"
                                                                stroke-linecap="round" stroke-linejoin="round">
                                                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                                <path
                                                                    d="M15 4v8h3.586a1 1 0 0 1 .707 1.707l-6.586 6.586a1 1 0 0 1 -1.414 0l-6.586 -6.586a1 1 0 0 1 .707 -1.707h3.586v-8a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1z" />
                                                            </svg>
                                                            <strong id="rx-bps<%= keys %>"></strong>
                                                        </div>
                                                        <div class="mx-1">
                                                            <svg xmlns="http://www.w3.org/2000/svg"
                                                                class="icon icon-tabler icon-tabler-arrow-big-top"
                                                                width="44" height="44" viewBox="0 0 24 24"
                                                                stroke-width="1.5" stroke="#206bc4" fill="#206bc4"
                                                                stroke-linecap="round" stroke-linejoin="round">
                                                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                                <path
                                                                    d="M9 20v-8h-3.586a1 1 0 0 1 -.707 -1.707l6.586 -6.586a1 1 0 0 1 1.414 0l6.586 6.586a1 1 0 0 1 -.707 1.707h-3.586v8a1 1 0 0 1 -1 1h-4a1 1 0 0 1 -1 -1z" />
                                                            </svg>
                                                            <strong id="tx-bps<%= keys %>"></strong>
                                                        </div>
                                                    </div>
                                                    <script>
                                                        arrether.push('<%= interface.name %>');
                                                    </script>
                                                    <div id="ether<%= keys %>">
                                                    </div>
                                                    <center>
                                                        <span class="h3 badge bg-teal">
                                                            <b> <%= interface.name %></b>
                                                        </span>
                                                    </center>
                                                </div>
                                            </div>
                                        </div>
                                        <% } %>
                                        <% }) %>
                                        <% } %>

                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <!-- FOOTER  -->
                <%- include('partials/footer') %>
            </div>
        </div>

        <div class="modal modal-blur fade" id="modal-offline-device" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        <div class="modal-title">Offline Device</div>
                        <div id="offline-device-list"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary me-auto" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- JAVASCRIPT  -->
        <%- include('partials/javascript') %>
        <script src="/assets/vendor/tabler/libs/apexcharts/dist/apexcharts.min.js"></script>
        <script>
            // @formatter:off
            var cpuChart = new ApexCharts(document.getElementById('chart-cpu-load'), {
                chart: {
                    type: "area",
                    fontFamily: 'inherit',
                    height: 40.0,
                    sparkline: {
                        enabled: true
                    },
                    animations: {
                        enabled: false
                    },
                },
                dataLabels: {
                    enabled: false,
                },
                fill: {
                    opacity: .16,
                    type: 'solid'
                },
                stroke: {
                    width: 2,
                    lineCap: "round",
                    curve: "smooth",
                },
                series: [{
                    name: "CPU Load",
                    data: []
                }],
                grid: {
                    strokeDashArray: 4,
                },
                xaxis: {
                    labels: {
                        padding: 0
                    },
                    tooltip: {
                        enabled: false
                    },
                    axisBorder: {
                        show: false,
                    }
                },
                yaxis: {
                    labels: {
                        padding: 4
                    },
                },
                colors: ["#206bc4"],
                legend: {
                    show: false,
                },
                tooltip: {
                    x: {
                        show: false
                    }
                },
            });
            cpuChart.render();
            // @formatter:on
        </script>
        <script>
            // @formatter:off
            var memoryChart = new ApexCharts(document.getElementById('chart-ram-usage'), {
                chart: {
                    type: "area",
                    fontFamily: 'inherit',
                    height: 40.0,
                    sparkline: {
                        enabled: true
                    },
                    animations: {
                        enabled: false
                    },
                },
                dataLabels: {
                    enabled: false,
                },
                fill: {
                    opacity: .16,
                    type: 'solid'
                },
                stroke: {
                    width: 2,
                    lineCap: "round",
                    curve: "smooth",
                },
                series: [{
                    name: "RAM Usage",
                    data: []
                }],
                grid: {
                    strokeDashArray: 4,
                },
                xaxis: {
                    labels: {
                        padding: 0
                    },
                    tooltip: {
                        enabled: false
                    },
                    axisBorder: {
                        show: false,
                    }
                },
                yaxis: {
                    labels: {
                        padding: 4
                    },
                },
                colors: ["#206bc4"],
                legend: {
                    show: false,
                },
                tooltip: {
                    x: {
                        show: false
                    }
                },
            });
            memoryChart.render();
            // @formatter:on
        </script>
        <script>
            // @formatter:off


            var optionChart = {
                chart: {
                    type: "line",
                    fontFamily: 'inherit',
                    height: 200,
                    sparkline: {
                        enabled: true
                    },
                    animations: {
                        enabled: false
                    },
                },
                dataLabels: {
                    enabled: false,
                },
                fill: {
                    opacity: .75,
                    type: 'solid'
                },
                stroke: {
                    width: 3,
                    lineCap: "round",
                },
                noData: {
                    text: 'Loading...'
                },
                series: [{
                        name: "Upload",
                        data: []
                    },
                    {
                        name: "Download",
                        data: []
                    }
                ],
                grid: {
                    strokeDashArray: 4,
                },
                xaxis: {
                    labels: {
                        padding: 0
                    },
                    tooltip: {
                        enabled: false
                    },
                    axisBorder: {
                        show: false,
                    }
                },
                tooltip: {
                    x: {
                        show: false
                    }
                },
                yaxis: {
                    labels: {
                        padding: 4
                    },
                },
                colors: ["#206bc4", "#fc0303"],
                legend: {
                    show: false,
                },
            };

            var ether = [];
            var txRateArr = [];
            var rxRateArr = [];
            arrether.forEach(function (val, key) {
                rxRateArr[key] = new Array(100).fill().map(() => 0);
                txRateArr[key] = new Array(100).fill().map(() => 0);
                ether[key] = new ApexCharts(document.getElementById('ether' + key), optionChart);
                ether[key].render();
            });
        </script>
        <script>
            docReady(function () {
                load();
            });

            var cpuLoadArr = new Array(20).fill().map(() => 0);
            var memoryUsageArr = new Array(20).fill().map(() => 0);


            function serverChanged() {
                window.location.href = "/";
            }

            function load() {
                if (arrether.length <= 0) {
                    return;
                }
                socket.disconnect();
                socket.connect();
                socket.emit('DASHBOARD', {
                    interface: arrether.join(',')
                });
                socket.emit('OFFLINE_SCANNER', {
                    count: 0
                });
            }
            socket.on('OFFLINE_SCANNER', function (data) {
                document.getElementById('total-device').innerHTML = data.deviceScanned + ' Devices';
                var offlineDeviceList = `<ol>`;
                var offlineDevicesList = ``;
                data.offlineDevice.forEach(function (device) {
                    offlineDeviceList +=
                        `<li>${device.name}:${device.comment} - ${device.connectTo}</li>`;
                    offlineDevicesList +=
                        `<div class="badge bg-red">${device.name}:${device.comment} - ${device.connectTo}</div>&nbsp;`;
                })
                offlineDeviceList += `</ol>`;
                document.getElementById('offline-device-list').innerHTML = offlineDeviceList;
                if (data.offlineDevice.length > 0) {
                    var offlineDeviceButton =
                        `<button class="badge bg-red" data-bs-toggle="modal" data-bs-target="#modal-offline-device">${data.offlineDevice.length} Offline</button>`;
                } else {
                    var offlineDevicesList = ``;
                    var offlineDeviceButton = `<button class="badge bg-green">Online</button>`;
                }
                //document.getElementById('devicesOff').innerHTML = offlineDevicesList;
                document.getElementById('offline-device').innerHTML = offlineDeviceButton;
            });

            socket.on('DASHBOARD', function (data) {
                setValue('version', data.version);
                setValue('temperature', data.temperature);
                setValue('voltage', data.voltage);
                setValue('model', data.model);
                if (data.cpuLoad !== undefined) {
                    setValue('cpu-load', data.cpuLoad);
                    cpuLoadArr.push(data.cpuLoad);
                    cpuChart.updateSeries([{
                        name: 'CPU Load',
                        data: cpuLoadArr.slice(-20)
                    }]);
                }
                if (data.usedMemory !== undefined && data.totalMemory !== undefined) {
                    document.getElementById('used-memory').innerHTML = bytesToSize(data.usedMemory, 'byte');
                    document.getElementById('total-memory').innerHTML = bytesToSize(data.totalMemory, 'byte');
                    memoryUsageArr.push(Math.ceil(data.usedMemory / data.totalMemory * 100));
                    memoryChart.updateSeries([{
                        name: 'RAM Usage',
                        data: memoryUsageArr.slice(-20)
                    }]);
                }
                if (data.traffic !== undefined && data.traffic.length >= 0) {

                    arrether.forEach(function (val, key) {
                        txRateArr[key].push(Math.ceil(parseInt(data.traffic[key][
                            'tx-bits-per-second'
                        ])));
                        rxRateArr[key].push(Math.ceil(parseInt(data.traffic[key][
                            'rx-bits-per-second'
                        ])));
                        document.getElementById('rx-bps' + key).innerHTML = bytesToSize(data.traffic[
                                key][
                                'rx-bits-per-second'
                            ],
                            'bps');
                        document.getElementById('tx-bps' + key).innerHTML = bytesToSize(data.traffic[
                                key][
                                'tx-bits-per-second'
                            ],
                            'bps');
                        ether[key].updateSeries([{
                            name: 'Upload',
                            data: txRateArr[key].slice(-100)
                        }, {
                            name: 'Download',
                            data: rxRateArr[key].slice(-100)
                        }]);
                    });

                }
                if (data.date !== undefined && data.time !== undefined) {
                    var dateArr = data.date.split('/');
                    var dateTime =
                        `${dateArr[1]} ${capitalizeFirstLetter(dateArr[0])} ${dateArr[2]} ${data.time}`;
                    document.getElementById('date-time').innerHTML = dateTime;
                }
                if (data.uptime !== undefined) {
                    function formatDuration(second) {
                        if (second < 0) second = -second;
                        const time = {
                            D: Math.floor(second / 86400),
                            H: Math.floor(second / 3600) % 24,
                            M: Math.floor(second / 60) % 60
                        };
                        return Object.entries(time)
                            .filter(val => val[1] !== 0)
                            .map(([key, val]) => `${val}${key}`)
                            .join(' ');
                    };
                    document.getElementById('uptime').innerHTML = formatDuration(data.uptime);
                }
            });

            function setValue(id, value) {
                if (value !== undefined && value !== null) {
                    document.getElementById(id).innerHTML = value;
                }
            }
        </script>
</body>

</html>